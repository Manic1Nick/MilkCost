@Controller
public class ApplicationController {

    @Autowired
    CostService costService;

    @RequestMapping(value = {"/", "/welcome"}, method = RequestMethod.GET)
    public String welcome(@ModelAttribute("message") String message, Model model, Principal principal) {

        if (message.equals(""))
            message = null;

        model.addAttribute("message", message);

        return "welcome";
    }

    @RequestMapping(value = "/costs/add", method = RequestMethod.GET)
    public String addNewCosts(@ModelAttribute("message") String message, Model model, Principal principal) {

        costService.createCostStructures();

        //CostStructure newCostStructure = userService.saveNewCostStructure(costStructure);
        //todo replace this operation to updateCostStructure() in userService

        //model.addAttribute("message", "Costs " + newCostStructure.getMonthYear() + " was added");

        return "welcome";
    }

    @RequestMapping(value = "/costs/get", method = RequestMethod.GET)
    public String getCosts(Model model, HttpServletRequest req) {

        String typeCostStr = req.getParameter("type");
        TypeCosts typeCost = typeCostStr.equals("TOTAL") ? TypeCosts.TOTAL :
                typeCostStr.equals("OVERHEAD") ? TypeCosts.OVERHEAD :
                        typeCostStr.equals("DIRECT") ? TypeCosts.DIRECT : null ;

        String dateMonthYear = "2016-10";
        DateFormat df = new SimpleDateFormat("yyyy-MM");
        Date date = new Date();
        try {
            date = df.parse(dateMonthYear);
        } catch (ParseException e) {
            model.addAttribute("message", "Costs getting error");
            return "welcome";
        }

        CostStructure costStructure = costService.getCostStructure(typeCost, date);
        model.addAttribute("costStructure", costStructure);

        return "costs";
    }
}