public class CostStructureFactory {
	
	private YearMonth period;
	private Set<String> accounts;
	private ReadExcelFile readXls;	
	
	public CostStructureFactory() {
		period = getMonthYear();
		accounts = createAccountsList();
	}
	
	public CostStructure createNewCostStructure(TypeCosts type, CostStructure... args) {
		CostStructure costStructure = null;
		if (type == TypeCosts.DIRECT) {
			costStructure = new CostStructureDirect(period, accounts);
		} else if (type == TypeCosts.OVERHEAD) {
			costStructure = new CostStructureOverhead(period, accounts);
		} else if (type == TypeCosts.ADDITIONAL) {
			costStructure = new CostStructureAdditional("COSTS", accounts);
		} else if (type == TypeCosts.TOTAL && args.length > 0) {
			costStructure = new CostStructureTotal(CostStructure... args);
		}
		return costStructure;
	};
	
	private YearMonth getMonthYear() {
        String filePath = Constants.COST_DIRECT_EXCEL_FILE_LOCATION_PATH;

        YearMonth mmYYYY = null;

        String[] filePathArray = filePath.split("/");
		String[] dateArray = filePathArray[filePathArray.length - 1].substring(0, lastIndexOf(".")).split("_");		

        if (dateArray.length >= 3) {
            String date = dateArray[dateArray.length-1] + "." + dateArray[dateArray.length-2];
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM.yyyy");
            mmYYYY = YearMonth.parse(date, formatter);
        }

        return mmYYYY;
	}
	
	private Set<String> createAccountsList() {
		return readXls.createAccountsListFromExcelData(Constants.ACCOUNTS_PROPERTY_EXCEL_FILE_LOCATION_PATH);
	}
	
	
}